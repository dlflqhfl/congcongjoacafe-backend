name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    # 실행되는 OS 환경설정
    runs-on: ubuntu-latest
    permissions:
      contents: read
    # 수행하고자 하는 처리 단계 명시
    steps:
    # 리포지토리의 코드를 현재 작업 환경(워크플로 러너)으로 가져오는 작업
    - uses: actions/checkout@v4 
    # JDK 17 설정
    - name: Set up JDK 17 
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    # SSH 설정
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
     # EC2로 파일 복사
    - name: Copy files to EC2
      run: |
        scp -r -o StrictHostKeyChecking=no ./* ubuntu@${{ secrets.HOST_IP }}:/home/ubuntu/congcongjoacafe-backend
    # Gradle 설정
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v4.0.0
    # gradlew 실행 권한 부여
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    # Gradle 빌드 실행
    - name: Build with Gradle Wrapper
      run: ./gradlew clean build --no-daemon --console=plain
    # Docker 그룹에 사용자 추가 및 Docker 재시작
    - name: Add ubuntu user to Docker group and restart Docker on EC2
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST_IP }} << 'EOF'
          sudo usermod -aG docker ubuntu
          sudo systemctl restart docker
          exit
        EOF
    # Docker 권한 확인
    - name: Verify Docker permissions on EC2
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST_IP }} "docker ps"
    # EC2에서 Docker Compose 실행
    - name: SSH into EC2 and run Docker Compose
      run: |
        ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.HOST_IP }} << 'EOF'
          cd /home/ubuntu/OmaStay
          docker-compose down
          docker-compose up -d --build
        EOF
